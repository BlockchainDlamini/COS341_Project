Input1.txt is meant to throw an error because it is not a valid file name.
Input2.txt is not meant to throw an error because it is a valid file name.

The algorithm used to implement the syntax tree in the Parser class is a simple recursive descent parser. Here is a step-by-step breakdown of the algorithm:
Initialize the Root Node: Start by creating the root node of the syntax tree.
Iterate Through Tokens: Loop through the list of tokens generated by the lexer.
Add Nodes Based on Token Type:
If the token is a reserved keyword, create an inner node and add it as a child to the current node.
If the token is not a reserved keyword, create a leaf node and add it as a child to the current node.
Update Current Node: Update the current node to the newly created inner node when a reserved keyword is encountered.
Set the Root Node: Finally, set the root node in the syntax tree.
Pseudocode
Create root node.
Set current node to root node.
For each token in the list of tokens:
If token is a reserved keyword:
Create an inner node.
Add inner node as a child to the current node.
Update current node to inner node.
Else:
Create a leaf node.
Add leaf node as a child to the current node.
Set the root node in the syntax tree.